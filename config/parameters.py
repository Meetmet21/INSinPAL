"""
:Author: Mehmet Sehir
:Date: 14/05/2024

This file contains all necessary paths towards external data or software for INSinPAL pipeline. A class is also
dedicated to directories path in INSinPAL working directory.

User has to modify this section to set its own environment.
"""

# MODULES
from os.path import join, dirname, abspath

# Snakemake version used during development.
SNAKEMAKE_VERSION = "7.32.4"

# Root directory of INSinPAL pipeline.
MAIN_DIR = abspath(join(dirname(__file__), ".."))

class Progs:
    """
    Paths to software used in INSinPAL outside of Conda environments set with snakemake.
    """

    def __init__(self):
        # Path to progs directory containing all the external software.
        self.path_Progs_dir = join(MAIN_DIR, "resources/progs")

        # SV callers used to call Insertions in WGS.
        self.names = ["insurveyor", "manta", "basil"]

        # Path to INSurVeyor singularity image.
        # Can be retrieved here: https://github.com/kensung-lab/INSurVeyor (under releases)
        self.insurveyor_version = "1.1.2"
        self.insurveyor_sif = "insurveyor.sif"
        self.insurveyor_dir = "INSurVeyor"
        self.insurveyor = join(self.path_Progs_dir, self.insurveyor_dir, self.insurveyor_version, self.insurveyor_sif)

        # Path to Basil module of Anise-Basil caller. (Anise is the assembly module, not working)
        # The github page: https://github.com/seqan/anise_basil
        # The singularity definition file is written by myself, and can be retrieved in resources in Gitlab.
        self.basil_version = "1.2.0"
        self.basil_sif = "anisebasil.sif"
        self.basil_dir = "Anis-Basil"
        self.basil = join(self.path_Progs_dir, self.basil_dir, self.basil_version, self.basil_sif)
        self.filtering_basil = "/opt/anise_basil/scripts/filter_basil.py"

        # Path to SvABA. Not retained after benchmarking with HG002 SV gold set.
        self.svaba_version = "1.2.0"
        self.svaba_sif = "SvABA.sif"
        self.svaba_dir = "SvABA"
        self.svaba = join(self.path_Progs_dir, self.svaba_dir, self.svaba_version, self.svaba_sif)

        # Path to iPRIns. Idem.
        self.iprins_version = "1.1.0"
        self.iprins_sif = "iprins.sif"
        self.iprins_dir = "iPRIns"
        self.iprins = join(self.path_Progs_dir, self.iprins_dir, self.iprins_version, self.iprins_sif)

        # Path to Manta.
        # The binary distribution can be retrieved here: https://github.com/Illumina/manta.
        self.manta_version = "1.6.0"
        self.manta_bin = "manta-1.6.0.centos6_x86_64/bin"
        self.manta_dir = "Manta"
        self.manta = join(self.path_Progs_dir, self.manta_dir, self.manta_version, self.manta_bin)
        self.manta_config = join(self.manta, "configManta.py")

        # Path to SCRAMble. Used to call MEIs in sample.
        self.scramble_version = "1.0.2"
        self.scramble_sif = "scramble.sif"
        self.scramble_dir = "scramble"
        self.scramble = join(self.path_Progs_dir, self.scramble_dir, self.scramble_version, self.scramble_sif)
        self.cluster_analysis = "/app/cluster_analysis/bin/SCRAMble.R"

        # Path to python 2.7 for Manta.
        self.python27 = "/software/bin/python2.7"

        # Path to AnnotSV to annotate Insertions.
        self.AnnotSV_version = "3.4"
        self.AnnotSV_dir = "AnnotSV"
        self.AnnotSV = join(self.path_Progs_dir, self.AnnotSV_dir, self.AnnotSV_version, "AnnotSV-3.4.2")


class Data:
    """
    Paths related to external data, not generated by INSinPAL pipeline.
    """

    def __init__(self):
        # Data directory
        self.path_data_dir = join(MAIN_DIR, "resources/data")

        # REFERENCE GENOME
        # reference genome with masked regions and decoys
        self.hg19_fa = join(self.path_data_dir, "Genome/hg19/genome.masked.fasta")
        # hg19 fasta sequence by chromosome
        self.chrom = [str(val) for val in range(1, 23)] + ["X", "Y"]
        self.hg19_fa_chromosomes = {chr: join(self.path_data_dir, "Genome/hg19/chromosomes", f"{chr}.fa")
                                    for chr in self.chrom}

        # REFERENCE MEIs sequence fasta for SCRAMble
        self.meis_ref = join(self.path_data_dir, "MEI_consensus_seqs_SCRAMble_plus_MOBSTER.fa")


class WorkFlowPaths:
    """
    Paths to INSinPAL pipeline directories following the distribution and reproducibility best practice here:
    https://snakemake.readthedocs.io/en/stable/snakefiles/deployment.html
    """

    def __init__(self):
        # Results folder
        self.results = join(MAIN_DIR, "results")
        # Resources folder
        self.resources = join(MAIN_DIR, "resources")
        # config folder
        self.config = join(MAIN_DIR, "config")
        # Workflow folder
        self.workflow = join(MAIN_DIR, "workflow")
        # envs folder
        self.envs = join(self.workflow, "envs")
        # notebook folder
        self.notebooks = join(self.workflow, "notebooks")
        # profile folder
        self.profile = join(self.workflow, "profile")
        # rules folder
        self.rules = join(self.workflow, "rules")
        # scripts folder
        self.scripts = join(self.workflow, "scripts")
